import{_ as s,c as o,z as e,t as r,a,R as i,o as n}from"./chunks/framework.70e71619.js";const b=JSON.parse('{"title":"Security Best Practices For Headless CMS Projects","description":"This guide covers best practices for security, authentication, and permissions within the context of Headless CMS.","frontmatter":{"description":"This guide covers best practices for security, authentication, and permissions within the context of Headless CMS.","tags":[],"skill_level":null,"directus_version":null,"author_override":null,"author":"Bryant Gillespie"},"headers":[],"relativePath":"use-cases/headless-cms/security.md","lastUpdated":1682552691000}'),c={name:"use-cases/headless-cms/security.md"},l=e("h1",{id:"security-best-practices-for-headless-cms-projects",tabindex:"-1"},[a("Security Best Practices For Headless CMS Projects "),e("a",{class:"header-anchor",href:"#security-best-practices-for-headless-cms-projects","aria-label":'Permalink to "Security Best Practices For Headless CMS Projects"'},"​")],-1),u=i('<p><a href="/use-cases/headless-cms/introduction.html">Headless CMS</a> when coupled with statically-generated sites are architecture choices that are generally more secure than Traditional CMS because your content is separated from the presentation layer. Given that users don&#39;t directly interact with a server to construct a page, there is a reduced ability for malicious actors to attack the website. However, it is still very important that you follow good security protocols to keep your data protected.</p><p>In this guide, we&#39;ll cover some best practices for keeping your Directus Headless CMS secure.</p><h2 id="restrict-public-role" tabindex="-1">Restrict Public Role <a class="header-anchor" href="#restrict-public-role" aria-label="Permalink to &quot;Restrict Public Role&quot;">​</a></h2><p>Directus makes it super easy to share your content with our REST and GraphQL APIs.</p><p>The Public role within <a href="/configuration/users-roles-permissions.html#roles">Roles and Permissions</a> defines what content is available without authentication. To be safe, all permissions are turned off by default. This means that no data is available via the API without providing a proper <a href="/reference/authentication.html#access-tokens">access token</a>. Your use case may allow all data to be public, but it may instead require restricted access.</p><p><strong>If you do want to make data public, we recommend these guidelines.</strong></p><ul><li><p>On your public role, only enable read access.</p></li><li><p>Consider defining a <a href="/configuration/users-roles-permissions/permissions.html#configure-custom-permissions">Custom Permission</a> for read operations to control which items are available and which fields within those items consumers can see.</p><p><img src="https://cdn.directus.io/docs/v9/headless-cms/security-20230322/custom-permissions.webp" alt="The custom permissions interface for the Public role is displayed. The Item Permissions table is active and one Rule is active - &quot;Status&quot; Equals &quot;Published&quot;."></p><p>Standard read permissions grant access to ALL data within a collection which means the general public could see unpublished content you might not want them to see.</p></li><li><p>Do not enable create, update, or delete access for collections within the Public role. This opens your instance up for attack from spammers and other bad actors.</p></li></ul><h2 id="create-scoped-roles-for-specific-purposes" tabindex="-1">Create Scoped Roles For Specific Purposes <a class="header-anchor" href="#create-scoped-roles-for-specific-purposes" aria-label="Permalink to &quot;Create Scoped Roles For Specific Purposes&quot;">​</a></h2><p>As a general security rule, you should only share the minimum amount of data that is needed to achieve your goal.</p><p>For an example website use case, you might have several different types of users and roles that need access to various levels of data.</p><ul><li><strong>Website API</strong> - role and user for reading content from the API (pages, posts, etc) and creating form submissions.</li><li><strong>Guest Author</strong> - restricted role where guest post authors can only update their own content.</li><li><strong>Content Manager</strong> - non-admin role that grants full CRUD access to all collections except business analytics.</li></ul><p>For each of these roles, allow access only to the collections and specific CRUD operations that each role needs to perform their function.</p><p>Our guide on <a href="/cookbook/permissions/basic-workflows.html">Content Approval Workflows</a> is helpful for scoping roles and permissions.</p><h2 id="obscure-access-tokens-and-urls" tabindex="-1">Obscure Access Tokens and URLs <a class="header-anchor" href="#obscure-access-tokens-and-urls" aria-label="Permalink to &quot;Obscure Access Tokens and URLs&quot;">​</a></h2><p>There are two ways to authenticate with Directus – <a href="/reference/authentication.html#access-tokens">Temporary Tokens (JWT) or Static tokens</a>.</p><p>Temporary tokens are generated by the login endpoint. They are short-lived and generally more secure.</p><p>Static tokens are set for each user and never expire. They are handy to use for server-to-server communication.</p><p>If you are using Static Tokens and your website or frontend is built using a static site generator (SSG) or calls your API on the client side, then you could be exposing your access token.</p><p>To obscure your Directus Access Tokens and URL:</p><ol><li><p><strong>Never store access tokens inside your code or repository.</strong> Use a .env file to store secrets and sensitive credentials like access tokens.</p></li><li><p><strong>Call your API from the server-side</strong>. Frontend frameworks like Next.js and Nuxt.js have &quot;server&quot; routes that you can setup that are only called from the server, never on the client.</p><p>You can also use serverless functions or backend proxies to hide them from public view. Some website deployment platforms include serverless functions as part of their offering.</p><ul><li><a href="https://vercel.com/docs/concepts/functions/serverless-functions" target="_blank" rel="noreferrer">Vercel Serverless Functions</a></li><li><a href="https://docs.netlify.com/functions/overview/" target="_blank" rel="noreferrer">Netlify Functions</a></li></ul></li></ol><h2 id="be-careful-when-granting-admin-access" tabindex="-1">Be Careful When Granting Admin Access <a class="header-anchor" href="#be-careful-when-granting-admin-access" aria-label="Permalink to &quot;Be Careful When Granting Admin Access&quot;">​</a></h2><p>In a typical Directus project, there’s only a small group of people that truly need the Administrator role. The Administrator role provides full-access to CRUD+S Operations on every collection and rights to change any project settings, roles, data models, etc.</p><p>When granting Admin access, make sure that it is only provided to those individuals who require it to perform their job responsibilities. Too many Admins or granting Admin access to those who don’t truly need it can put the security of your Directus instance at risk.</p><h2 id="require-two-factor-authentication-and-secure-passwords" tabindex="-1">Require Two-Factor Authentication and Secure Passwords <a class="header-anchor" href="#require-two-factor-authentication-and-secure-passwords" aria-label="Permalink to &quot;Require Two-Factor Authentication and Secure Passwords&quot;">​</a></h2><p>Many data breaches can be attributed back to sharing passwords or using the same password across many different sites.</p><p>While in the development phase of your project, it can certainly be easier and quicker to use weak passwords for testing purposes.</p><p>But when it’s time to go to production and add all your different users, we recommend the following:</p><ol><li><p><strong>Enable and enforce two-factor authentication.</strong></p><p>Two-factor authentication can be enforced for each specific role by checking the Require 2FA field in a <a href="/configuration/users-roles-permissions/roles.html#configure-role-details">role&#39;s settings</a>.</p><p><img src="https://cdn.directus.io/docs/v9/headless-cms/security-20230322/2fa-role.webp" alt="The Administrator role settings page is displayed. The Require 2FA form field is highlighted and enabled."></p><p>Individual users can enable two-factor authentication by checking the Two-Factor Authentication field on their own <a href="/app/user-directory.html#user-details-page">user detail page</a> and confirming their password.</p><p><img src="https://cdn.directus.io/docs/v9/headless-cms/security-20230322/2fa-user.webp" alt="A sample user&#39;s detail page is shown. The Two-Factor Authentication form field is highlighted. "></p></li><li><p><strong>Enable the Strong option for Auth Password Policy under <a href="/configuration/project-settings.html#security">Project Settings &gt; Security</a>.</strong></p><p><img src="https://cdn.directus.io/docs/v9/headless-cms/security-20230322/security-project-settings.webp" alt="The Project Settings page is shown. The Security section is highlighted. Within the Security, section there are two fields shown: Auth Password Policy and Auth Login Attempts."></p></li></ol>',28);function d(t,h,p,f,m,g){return n(),o("div",null,[l,e("blockquote",null,[e("p",null,r(t.$frontmatter.description),1)]),u])}const w=s(c,[["render",d]]);export{b as __pageData,w as default};
