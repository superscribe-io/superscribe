import{_ as e,c as n,o as t,R as s,z as a,a as o}from"./chunks/framework.70e71619.js";const O=JSON.parse('{"title":"Flows","description":"Flows enable custom, event-driven data processing and task automation within Directus. Each flow is composed of one trigger, followed by a series of operations.","frontmatter":{"description":"Flows enable custom, event-driven data processing and task automation within Directus. Each flow is composed of one trigger, followed by a series of operations.","readTime":"5 min read"},"headers":[],"relativePath":"app/flows.md","lastUpdated":1682552691000}'),l={name:"app/flows.md"},i=s('<h1 id="flows" tabindex="-1">Flows <a class="header-anchor" href="#flows" aria-label="Permalink to &quot;Flows&quot;">​</a></h1><blockquote><p>Flows enable custom, event-driven data processing and task automation within Directus. Each flow is composed of one trigger, followed by a series of operations.</p></blockquote><div class="tip custom-block"><p class="custom-block-title">Before You Begin</p><p>Please be sure to see the <a href="/getting-started/quickstart.html">Quickstart Guide</a> to get a basic overview of the platform.</p></div><div class="tip custom-block"><p class="custom-block-title">Learn More</p><p>There is also dedicated API documentation on <a href="/reference/system/flows.html">Flows</a> and <a href="/reference/system/operations.html">Operations</a>.</p></div><h2 id="what-s-a-flow" tabindex="-1">What&#39;s a Flow? <a class="header-anchor" href="#what-s-a-flow" aria-label="Permalink to &quot;What&#39;s a Flow?&quot;">​</a></h2><p><img src="https://cdn.directus.io/docs/v9/configuration/flows/flows/flows-20220603A/whats-a-flow-20220603A.webp" alt="What&#39;s a Flow?"></p><p>Each flow is made up of three elements: A trigger, operations, and a data chain.</p><h3 id="triggers" tabindex="-1"><strong>Triggers</strong> <a class="header-anchor" href="#triggers" aria-label="Permalink to &quot;**Triggers**&quot;">​</a></h3><p>Each flow begins with a <a href="/configuration/flows/triggers.html">trigger</a>, which defines the action or event that starts the Flow. This action or event could be some type of transaction within the app, an incoming webhook, a cron job, etc.</p><h3 id="operations" tabindex="-1">Operations <a class="header-anchor" href="#operations" aria-label="Permalink to &quot;Operations&quot;">​</a></h3><p>An <a href="/configuration/flows/operations.html">operation</a> is an action or process performed within the flow. These enable you to manage data: <em>send off emails, push in-app notifications, send webhooks, and beyond</em>.</p><p>To put it in conceptual terms, operations do three things:</p><ul><li><strong>Get data</strong> from Directus or another outside service.</li><li><strong>Process data</strong> a.k.a. transform it, validate it, or whatever.</li><li><strong>Send data</strong> to Directus or another outside service.</li></ul><div class="tip custom-block"><p class="custom-block-title">Developers</p><p>You can even develop your own <a href="/extensions/operations.html">custom operations</a> to fit any use-case.</p></div><h3 id="data-chains" tabindex="-1">Data Chains <a class="header-anchor" href="#data-chains" aria-label="Permalink to &quot;Data Chains&quot;">​</a></h3><p>In order for a flow&#39;s operations to track and access the same data, each flow creates its own <a href="#the-data-chain">data chain</a>. Every operation has access to this data chain and each operation appends some value onto this object after it runs. This means you can dynamically access data from a previous operation in the current operation with <a href="#data-chain-variables">data chain variables</a>.</p><h3 id="control-flow" tabindex="-1">Control Flow <a class="header-anchor" href="#control-flow" aria-label="Permalink to &quot;Control Flow&quot;">​</a></h3><p>Not every operation that executes in a flow does so successfully. In some cases, your operations are going to fail. Perhaps an operation tried to access data that doesn&#39;t exist, or a webhook operation fails for some reason, or perhaps you set a <a href="/configuration/flows/operations.html#condition">condition</a> operation, which <em>fails by design</em> when its condition is not met.</p><p>These kinds of failed operations do not immediately stop your flow. Instead, flows let you implement <a href="https://en.wikipedia.org/wiki/Control_flow" target="_blank" rel="noreferrer">control flow</a>, by providing <strong>success paths</strong> and <strong>failure paths</strong> within a flow:</p><ul><li><strong>Success</strong> — If <code>operation1</code> executes successfully, then <code>operation2</code> executes.</li><li><strong>Failure</strong> — Else if <code>operation1</code> fails on execution, then <code>operation3</code> executes.</li></ul><p><em>And there we have it!</em> These are the conceptual cornerstones of any flow. Now you&#39;ll need to know how to actually create a flow, which we discuss in the next section.</p><h2 id="configure-a-flow" tabindex="-1">Configure A Flow <a class="header-anchor" href="#configure-a-flow" aria-label="Permalink to &quot;Configure A Flow&quot;">​</a></h2>',22),r=a("video",{autoplay:"",playsinline:"",muted:"",loop:"",controls:"",title:"Create a Flow"},[a("source",{src:"https://cdn.directus.io/docs/v9/configuration/flows/flows/flows-20220603A/create-a-flow-20220603A.mp4",type:"video/mp4"})],-1),p=a("h3",{id:"create-a-flow",tabindex:"-1"},[o("Create a Flow "),a("a",{class:"header-anchor",href:"#create-a-flow","aria-label":'Permalink to "Create a Flow"'},"​")],-1),c=a("ol",null,[a("li",null,[o("Navigate to "),a("strong",null,"Settings > Flows"),o(" and click "),a("span",{mi:"",btn:""},"add"),o(" in the page header. A drawer will open.")]),a("li",null,[o("Under "),a("strong",null,"Flow Setup"),o(", fill in a "),a("strong",null,"Name"),o(" for the flow and the following "),a("em",null,"optional"),o(" details: "),a("ul",null,[a("li",null,[a("strong",null,"Status"),o(" — Sets the flow to active or inactive.")]),a("li",null,[a("strong",null,"Icon"),o(" — Adds an icon to help quickly identify the flow.")]),a("li",null,[a("strong",null,"Description"),o(" — Sets a brief verbal description of the flow.")]),a("li",null,[a("strong",null,"Color"),o(" — Sets a color to help identify the flow.")]),a("li",null,[a("strong",null,"Activity and Logs Tracking"),o(" — Lets you "),a("strong",null,"Track Activity and Logs"),o(", "),a("strong",null,"Activity"),o(", or "),a("strong",null,"Neither"),o(".")])])])],-1),d=s('<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>To learn more, see the section below on <a href="#logs">Logs</a> as well as the <a href="/configuration/activity-log.html">Activity Log</a> documentation.</p></div><h3 id="configure-a-trigger" tabindex="-1">Configure a Trigger <a class="header-anchor" href="#configure-a-trigger" aria-label="Permalink to &quot;Configure a Trigger&quot;">​</a></h3>',2),u=a("ol",{start:"3"},[a("li",null,[o("Click "),a("span",{mi:"",btn:""},"arrow_forward"),o(" to navigate to "),a("strong",null,"Trigger Setup"),o(". Select a "),a("a",{href:"/configuration/flows/triggers.html"},"trigger"),o(" type and configure as desired.")]),a("li",null,[o("Click "),a("span",{mi:"",btn:""},"done"),o(" in the menu header to confirm.")])],-1),h=a("p",null,"You'll now see your trigger in an empty grid area. Its time to start adding operations.",-1),y=a("h3",{id:"configure-an-operation",tabindex:"-1"},[o("Configure an Operation "),a("a",{class:"header-anchor",href:"#configure-an-operation","aria-label":'Permalink to "Configure an Operation"'},"​")],-1),g=a("ol",{start:"5"},[a("li",null,[o("On the trigger panel, click "),a("span",{mi:""},"add"),o(" and the "),a("strong",null,"Create Operation"),o(" side drawer will open.")]),a("li",null,[o("Choose a "),a("strong",null,"Name"),o(", an "),a("a",{href:"/configuration/flows/operations.html"},"operation"),o(" type, and configure as desired."),a("br"),o(" Directus will convert the name into a unique operation key, used on the "),a("a",{href:"#the-data-chain"},"data chain"),o("."),a("br"),o(" If you don't choose a name, the system will auto-generate a name and key for you.")]),a("li",null,[o("Next, click "),a("span",{mi:"",btn:""},"done"),o(" in the page header to confirm and return to the flow grid area.")]),a("li",null,[o("From here, you can make the following optional configurations: "),a("ul",null,[a("li",null,[a("strong",null,"Reposition"),o(" — You can drag and drop panels to reposition as desired.")]),a("li",null,[a("strong",null,"Unlink/Relink"),o(" — Click and drag "),a("span",{mi:"",icon:"",prmry:""},"adjust"),o(" or "),a("span",{mi:"",icon:"",prmry:""},"arrow_forward"),o(" to unlink/relink flows.")]),a("li",null,[a("strong",null,"Duplicate an Operation"),o(" — To duplicate an operation, click "),a("span",{mi:"",icon:""},"more_vert"),o(" to open its context menu. Click "),a("span",{mi:"",icon:""},"control_point_duplicate"),o(" and a duplicate of the operation (and its configuration details) will be created.")]),a("li",null,[a("strong",null,"Copy an Operation"),o(" — To copy and paste an operation into another flow, click "),a("span",{mi:"",icon:""},"more_vert"),o(" to open its context menu. Click "),a("span",{mi:"",icon:""},"input"),o(" and a popup menu will open. Choose the desired flow from the dropdown and click "),a("strong",null,"Copy"),o(".")]),a("li",null,[a("strong",null,[a("span",{mi:"",icon:""},"data_object"),o(" Toggle Raw Editor")]),o(" — Click "),a("span",{mi:"",icon:""},"data_object"),o(" on an operations' form input fields to toggle the input type between standard and raw value. This is allows you to add a raw value or "),a("a",{href:"#data-chain-variables"},"Data Chain Variables"),o(" within any type of configuration option, even dropdown menus, checkboxes, and radio buttons.")]),a("li",null,[a("strong",null,"Delete an Operation"),o(" — To delete an operation, click "),a("span",{mi:"",icon:""},"more_vert"),o(" then "),a("span",{mi:"",icon:"",dngr:""},"delete"),o(". A popup menu will appear. Click "),a("strong",null,"Delete"),o(" to confirm.")])])]),a("li",null,[o("On the newly created operation panel: "),a("ul",null,[a("li",null,[o("Click "),a("span",{mi:"",icon:""},"add"),o(" to add an operation to the "),a("strong",null,"success path"),o(".")]),a("li",null,[o("Click "),a("span",{mi:"",icon:""},"remove"),o(" to add an operation to the "),a("strong",null,"failure path"),o(".")])])]),a("li",null,"Repeat steps 5-10 to build out your flow as desired."),a("li",null,[o("Click "),a("span",{mi:"",btn:""},"done"),o(" to confirm and create your flow.")]),a("li",null,[o("Click "),a("span",{mi:"",btn:""},"arrow_back"),o(" to return to the flows list.")]),a("li",null,"Once created, you may need to re-edit your flow, toggle it to inactive, or delete it.")],-1),D=a("h3",{id:"edit-a-flow",tabindex:"-1"},[o("Edit a Flow "),a("a",{class:"header-anchor",href:"#edit-a-flow","aria-label":'Permalink to "Edit a Flow"'},"​")],-1),f=a("ol",null,[a("li",null,"Navigate to the desired flow."),a("li",null,[o("Click "),a("span",{mi:"",btn:"",muted:""},"edit"),o(" in the flow page header and make reconfigurations as desired.")]),a("li",null,[o("Click "),a("span",{mi:"",btn:""},"done"),o(" to confirm.")])],-1),F=a("h3",{id:"toggle-a-flow-to-inactive",tabindex:"-1"},[o("Toggle a Flow to Inactive "),a("a",{class:"header-anchor",href:"#toggle-a-flow-to-inactive","aria-label":'Permalink to "Toggle a Flow to Inactive"'},"​")],-1),m=a("ol",null,[a("li",null,[o("Navigate to "),a("strong",null,"Settings > Flows"),o(" and click "),a("span",{mi:"",icon:""},"more_vert"),o(" on the desired flow.")]),a("li",null,[o("Click "),a("strong",null,[a("span",{mi:"",icon:""},"check"),o(" Set Flow to Active")]),o(" or "),a("strong",null,[a("span",{mi:"",icon:""},"block"),o(" Set Flow to Inactive")]),o(".")])],-1),w=a("h3",{id:"delete-a-flow",tabindex:"-1"},[o("Delete a Flow "),a("a",{class:"header-anchor",href:"#delete-a-flow","aria-label":'Permalink to "Delete a Flow"'},"​")],-1),C=a("ol",null,[a("li",null,[o("Click "),a("span",{mi:"",icon:""},"more_vert"),o(" on the desired flow to open its context menu.")]),a("li",null,[o("Click "),a("span",{mi:"",icon:"",dngr:""},"delete"),o(" and a popup menu will appear. Click "),a("strong",null,"Delete"),o(" to confirm.")])],-1),b=s(`<p>Now that we know how to create and configure a flow, it&#39;s time to get a firmer understanding of the data chain.</p><h2 id="the-data-chain" tabindex="-1">The Data Chain <a class="header-anchor" href="#the-data-chain" aria-label="Permalink to &quot;The Data Chain&quot;">​</a></h2><p>Remember, each flow creates its own JSON object to store any data generated.</p><p>When the flow begins, four keys are appended to the data chain: <code>$trigger</code>, <code>$accountability</code>, <code>$env</code>, and <code>$last</code>. Then, as each operation runs, it has access to this data chain. Once an operation finishes, its data is appended under its <code>&lt;operationKey&gt;</code>. When the operation doesn&#39;t generate data, <code>null</code> is appended under its key.</p><p>The following is a highly generic example of a data chain.</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">$trigger</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// Contains data generated by the flow&#39;s trigger.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// This could include headers, access tokens, payloads, etc.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// Every data chain has a $trigger key.</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">$accountability</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// Provides details on who/what started the flow.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// This could include user&#39;s id, role, ip address, etc...</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// Every data chain has an $accountability key.</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">$env</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// Environment variables allowed in \`FLOWS_ENV_ALLOW_LIST\`.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// This could include PUBLIC_URL, PORT, etc...</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// Every data chain has an $env key.</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">$last</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// The value appended under $last changes after each operation.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// It stores data of the last operation that executed in the flow.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// That way, you don&#39;t have to remember the previous operation&#39;s unique keyname.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// It&#39;s a handy little convenience tool!</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// Every data chain has a $last key.</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">operationKey1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">A value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// The data (if any) generated by the first operation.</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">operationKey2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">nestedKey</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">nested val</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">nested val 2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// It will be common to have nested JSON data.</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">operationKey3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// A null value is appended if no data generated.</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>As you can see, the example above doesn&#39;t have any substantial data inside each key. In reality, there&#39;s going to be a lot of data and it will always be slightly different, based on your flow&#39;s unique configuration. During configuration and debugging, you&#39;ll need to use a tool like <a href="#logs">The Log</a> to view your data chain and make sure each operation is accessing and generating data as you intended.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In our examples, we are using generic <em>placeholders</em> for operation keys, like <code>&lt;operationKey&gt;</code>, which might look funny to low-code users. In practice, operation keys will actually have unique and descriptive names, like <code>send_email_7538</code>.</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Remember, <code>$trigger</code>, <code>$accountability</code>, and <code>$last</code> begin with <code>$</code>, but not <code>operationKeys</code>.</p></div><h2 id="data-chain-variables" tabindex="-1">Data Chain Variables <a class="header-anchor" href="#data-chain-variables" aria-label="Permalink to &quot;Data Chain Variables&quot;">​</a></h2><p>While <a href="#configure-an-operation">configuring your operations</a>, you can use keys from the data chain as variables to access data. Simply wrap the variable with quotes and <em>double mustaches</em>. For example:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{{ $accountability }}</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>will get the data nested under the <code>$accountability</code> key, producing something like this:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">4b11492d-631d-4b8a-bca7-2beasdfadf58b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">role</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">12c79228-5361-4905-929b-d69d3w46trs6b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">admin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">ip</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">127.0.0.1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">userAgent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Amazon CloudFront</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>You can mix your own hard-coded JSON alongside variables.<br> You can also use dot-notation and array indexing to retrieve sub-nested values.</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">key0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a hard-coded value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">key1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{{ $trigger.payload }}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">key2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{{ operationKey.payload.friend_list[0] }}</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>You <strong>cannot</strong> pass any type of computation using double-moustache syntax.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{{ 2 + 2 }}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">key2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{{ $trigger.payload.toLowerCase() }}</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>To perform computations on flow data, use the <a href="/configuration/flows/operations.html#script">script operation</a> or a <a href="/configuration/flows/operations.html#webhook">webhook</a>.</p></div><p>Certain operations use dropdowns, toggles, checkboxes, and other input options. However, you can bypass this entirely to input raw values directly with <a href="#configure-an-operation">Toggle to Raw Editor</a>. You can use double-moustache syntax to access data dynamically in these input options as well.</p><h2 id="logs" tabindex="-1">Logs <a class="header-anchor" href="#logs" aria-label="Permalink to &quot;Logs&quot;">​</a></h2>`,21),A=a("video",{autoplay:"",playsinline:"",muted:"",loop:"",controls:"",title:""},[a("source",{src:"https://cdn.directus.io/docs/v9/configuration/flows/flows/flows-20220603A/logs-20220603A.mp4",type:"video/mp4"})],-1),k=a("p",null,"Accessible from the sidebar, logs store information for each flow execution. Each log will display information from triggers as well as each operation in the flow. To access a flow's logs, follow these steps.",-1),v=a("ol",null,[a("li",null,[o("Navigate to "),a("strong",null,"Settings > Flows"),o(" and click the desired flow.")]),a("li",null,[o("Click "),a("strong",null,[a("span",{mi:"",icon:"",prmry:""},"fact_check"),o(" Logs")]),o(" in the sidebar. A side drawer will open, displaying the flow's logs.")]),a("li",null,"Click a log and another side drawer will open, allowing you to peer through its data."),a("li",null,[o("When finished, click "),a("span",{mi:"",btn:"",muted:""},"close"),o(" to close the drawer.")])],-1),_=s(`<p>Logs are not a 1:1 mapping to the data chain. Each trigger and operation gets its own dropdown, which stores its relevant data. Here&#39;s what you&#39;ll get from each of these:</p><p><strong>Trigger</strong></p><ul><li><strong>Options</strong> — The values you input when you configured the trigger.<br><em>(These configuration options are not stored on the data chain)</em>.</li><li><strong>Payload</strong> — Displays the data appended under <code>$trigger</code>.</li><li><strong>Accountability</strong> — Displays data appended under <code>$accountability</code>.</li></ul><p>Note that <code>$accountability</code> is not nested under the <code>$trigger</code> key. However, it is listed under the Trigger in the Log because <code>$accountability</code> is generated by the trigger.</p><p><strong><code>&lt;OperationKey&gt;</code></strong></p><ul><li><strong>Options</strong> — The values you input when you configured the operation.<br><em>(These configuration options are not stored on the data chain)</em>.</li><li><strong>Payload</strong> — Displays the data appended under this <code>&lt;operationKey&gt;</code>.</li></ul><p>Remember, the <a href="/configuration/flows/operations.html#log-to-console">Log to Console</a> operation is a key debugging tool. It does not append data to the data chain. You will view your log message under <strong>Options</strong>. Therefore, anything you log will always be displayed as nested under a <code>message</code> key. For example, if you decide to log <code>&quot;The last operation was a success&quot;</code>, it will be displayed as:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	&quot;message&quot;: &quot;The last operation was a success&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">Logs are stored in the database</p><p>Keep in mind that if you&#39;ve configured a flow to track logs, all this information is stored in the database. You may need to periodically delete this data.</p></div><div class="tip custom-block"><p class="custom-block-title">Where is <code>$last</code>?</p><p>You may notice <code>$last</code> is not in the Logs. Remember, <code>$last</code> constantly updates to store the data of the most recently executed operation. The log shows the results of the entire flow. Therefore <code>$last</code> would simply be the very last operation in the flow.</p></div><div class="tip custom-block"><p class="custom-block-title">More on Debugging</p><p>You may find a tool like <a href="https://www.postman.com/" target="_blank" rel="noreferrer">Postman</a> quite helpful for viewing data and debugging flows.</p></div>`,11),q=[i,r,p,c,d,u,h,y,g,D,f,F,m,w,C,b,A,k,v,_];function T(E,x,P,S,$,I){return t(),n("div",null,q)}const L=e(l,[["render",T]]);export{O as __pageData,L as default};
