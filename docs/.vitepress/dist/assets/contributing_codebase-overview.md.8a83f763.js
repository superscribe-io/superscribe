import{_ as e,c as a,o as s,R as t}from"./chunks/framework.70e71619.js";const m=JSON.parse('{"title":"Codebase Overview","description":"The core concepts behind Directus are simple, however the problems that must be solved to honor them can be remarkably complex. We strive to design and engineer the most elegant solutions possible, so that our codebase remains accessible.","frontmatter":{"description":"The core concepts behind Directus are simple, however the problems that must be solved to honor them can be remarkably complex. We strive to design and engineer the most elegant solutions possible, so that our codebase remains accessible.","readTime":"3 min read"},"headers":[],"relativePath":"contributing/codebase-overview.md","lastUpdated":1682552691000}'),r={name:"contributing/codebase-overview.md"},o=t('<h1 id="codebase-overview" tabindex="-1">Codebase Overview <a class="header-anchor" href="#codebase-overview" aria-label="Permalink to &quot;Codebase Overview&quot;">​</a></h1><blockquote><p><strong>The core concepts behind Directus are simple, however the problems that must be solved to honor them can be remarkably complex.</strong> We strive to design and engineer the most elegant solutions possible, so that our codebase remains accessible.</p></blockquote><h2 id="monorepo" tabindex="-1">Monorepo <a class="header-anchor" href="#monorepo" aria-label="Permalink to &quot;Monorepo&quot;">​</a></h2><p>The primary Directus repository is located at <a href="https://github.com/directus/directus" target="_blank" rel="noreferrer"><code>directus/directus</code></a> and houses the Admin App (Vue.js 3 w/ Composition API), API (Node.js), API Specification (OpenAPI), and other smaller packages used internally. Directus follows a monorepo design similar to React or Babel — this page will outline our monorepo&#39;s design and structure.</p><h2 id="api" tabindex="-1"><code>/api</code> <a class="header-anchor" href="#api" aria-label="Permalink to &quot;`/api`&quot;">​</a></h2><p>Contains the Directus API (REST+GraphQL), written in Node.js.</p><h4 id="api-src-cli" tabindex="-1"><code>/api/src/cli</code> <a class="header-anchor" href="#api-src-cli" aria-label="Permalink to &quot;`/api/src/cli`&quot;">​</a></h4><p>The CLI commands and matching functions that the <code>directus</code> package ships with.</p><h4 id="api-src-controllers" tabindex="-1"><code>/api/src/controllers</code> <a class="header-anchor" href="#api-src-controllers" aria-label="Permalink to &quot;`/api/src/controllers`&quot;">​</a></h4><p>Route handler controllers for the endpoints in the API.</p><h4 id="api-src-database" tabindex="-1"><code>/api/src/database</code> <a class="header-anchor" href="#api-src-database" aria-label="Permalink to &quot;`/api/src/database`&quot;">​</a></h4><p>Database manipulation abstraction, system migrations, and system data. Also where you&#39;d find the main query runner.</p><h4 id="api-src-exceptions" tabindex="-1"><code>/api/src/exceptions</code> <a class="header-anchor" href="#api-src-exceptions" aria-label="Permalink to &quot;`/api/src/exceptions`&quot;">​</a></h4><p>Classes for the different errors the API is expected to throw. Used to set the HTTP status and error codes.</p><h4 id="api-src-middleware" tabindex="-1"><code>/api/src/middleware</code> <a class="header-anchor" href="#api-src-middleware" aria-label="Permalink to &quot;`/api/src/middleware`&quot;">​</a></h4><p>Various (express) routing middleware. Includes things like cache-checker, authenticator, etc.</p><h4 id="api-src-services" tabindex="-1"><code>/api/src/services</code> <a class="header-anchor" href="#api-src-services" aria-label="Permalink to &quot;`/api/src/services`&quot;">​</a></h4><p>Internal services. The main abstraction for interfacing with the data in the database. Both GraphQL and REST requests are &quot;translated&quot; to use these services as the main logic in the platform.</p><h4 id="api-src-types" tabindex="-1"><code>/api/src/types</code> <a class="header-anchor" href="#api-src-types" aria-label="Permalink to &quot;`/api/src/types`&quot;">​</a></h4><p>TypeScript types that are shared between the different parts of the API.</p><h4 id="api-src-utils" tabindex="-1"><code>/api/src/utils</code> <a class="header-anchor" href="#api-src-utils" aria-label="Permalink to &quot;`/api/src/utils`&quot;">​</a></h4><p>Various utility functions.</p><h2 id="app" tabindex="-1"><code>/app</code> <a class="header-anchor" href="#app" aria-label="Permalink to &quot;`/app`&quot;">​</a></h2><p>Contains the Directus Admin App, written in Vue.js 3 w/ the Composition API.</p><h4 id="app-public" tabindex="-1"><code>/app/public</code> <a class="header-anchor" href="#app-public" aria-label="Permalink to &quot;`/app/public`&quot;">​</a></h4><p>Assets that are included with the app, but not bundled.</p><h4 id="app-src-assets" tabindex="-1"><code>/app/src/assets</code> <a class="header-anchor" href="#app-src-assets" aria-label="Permalink to &quot;`/app/src/assets`&quot;">​</a></h4><p>Files that are included within the app. Are bundled / optimized in the build step.</p><h4 id="app-src-components" tabindex="-1"><code>/app/src/components</code> <a class="header-anchor" href="#app-src-components" aria-label="Permalink to &quot;`/app/src/components`&quot;">​</a></h4><p>(Base) components that are used across the platform. Contains &quot;basic building blocks&quot; like button, input, etc.</p><h4 id="app-src-composables" tabindex="-1"><code>/app/src/composables</code> <a class="header-anchor" href="#app-src-composables" aria-label="Permalink to &quot;`/app/src/composables`&quot;">​</a></h4><p>Reusable parts of reactive logic that can be used between Vue components. Includes things reactively calculating time from now, fetching a single item, etc.</p><h4 id="app-src-directives" tabindex="-1"><code>/app/src/directives</code> <a class="header-anchor" href="#app-src-directives" aria-label="Permalink to &quot;`/app/src/directives`&quot;">​</a></h4><p>Custom Vue directives (e.g. <code>v-tooltip</code>).</p><h4 id="app-src-displays" tabindex="-1"><code>/app/src/displays</code> <a class="header-anchor" href="#app-src-displays" aria-label="Permalink to &quot;`/app/src/displays`&quot;">​</a></h4><p>Components to display of data within the app.</p><h4 id="app-src-interfaces" tabindex="-1"><code>/app/src/interfaces</code> <a class="header-anchor" href="#app-src-interfaces" aria-label="Permalink to &quot;`/app/src/interfaces`&quot;">​</a></h4><p>The core-included interfaces.</p><h4 id="app-src-lang" tabindex="-1"><code>/app/src/lang</code> <a class="header-anchor" href="#app-src-lang" aria-label="Permalink to &quot;`/app/src/lang`&quot;">​</a></h4><p>Translations abstraction, and language files. The language yaml files are maintained through <a href="https://locales.directus.io" target="_blank" rel="noreferrer">Crowdin</a>.</p><h4 id="app-src-layouts" tabindex="-1"><code>/app/src/layouts</code> <a class="header-anchor" href="#app-src-layouts" aria-label="Permalink to &quot;`/app/src/layouts`&quot;">​</a></h4><p>The core-included layouts.</p><h4 id="app-src-modules" tabindex="-1"><code>/app/src/modules</code> <a class="header-anchor" href="#app-src-modules" aria-label="Permalink to &quot;`/app/src/modules`&quot;">​</a></h4><p>The core-included modules.</p><h4 id="app-src-routes" tabindex="-1"><code>/app/src/routes</code> <a class="header-anchor" href="#app-src-routes" aria-label="Permalink to &quot;`/app/src/routes`&quot;">​</a></h4><p>The routes in the app. Modules define their own routes, so this only includes the &quot;system&quot; things that don&#39;t belong to module, like login.</p><h4 id="app-src-stores" tabindex="-1"><code>/app/src/stores</code> <a class="header-anchor" href="#app-src-stores" aria-label="Permalink to &quot;`/app/src/stores`&quot;">​</a></h4><p><a href="https://pinia.esm.dev" target="_blank" rel="noreferrer">Pinia</a> based stores used for global state tracking.</p><h4 id="app-src-styles" tabindex="-1"><code>/app/src/styles</code> <a class="header-anchor" href="#app-src-styles" aria-label="Permalink to &quot;`/app/src/styles`&quot;">​</a></h4><p>Global styles in the app. Every component has their own component styles, these are just the global styles.</p><h4 id="app-src-types" tabindex="-1"><code>/app/src/types</code> <a class="header-anchor" href="#app-src-types" aria-label="Permalink to &quot;`/app/src/types`&quot;">​</a></h4><p>TypeScript types that are shared between the different parts of the API.</p><h4 id="app-src-utils" tabindex="-1"><code>/app/src/utils</code> <a class="header-anchor" href="#app-src-utils" aria-label="Permalink to &quot;`/app/src/utils`&quot;">​</a></h4><p>Utility functions used in various parts of the app.</p><h4 id="app-src-views" tabindex="-1"><code>/app/src/views</code> <a class="header-anchor" href="#app-src-views" aria-label="Permalink to &quot;`/app/src/views`&quot;">​</a></h4><p>The (two) main views used in the app: public / private. Also contains &quot;internal&quot; coupled components for those two views.</p><h2 id="packages" tabindex="-1"><code>/packages</code> <a class="header-anchor" href="#packages" aria-label="Permalink to &quot;`/packages`&quot;">​</a></h2><p>The various sub-packages of the platform. Including the file-storage adapters, schema, specs, etc.</p><h2 id="tests" tabindex="-1"><code>/tests</code> <a class="header-anchor" href="#tests" aria-label="Permalink to &quot;`/tests`&quot;">​</a></h2><p>Tests are maintained on a per-package base. This folder contains the platform-wide (end-to-end) tests.</p>',60),i=[o];function c(p,n,d,l,h,u){return s(),a("div",null,i)}const f=e(r,[["render",c]]);export{m as __pageData,f as default};
