import{_ as e,c as n,o as s,R as o}from"./chunks/framework.70e71619.js";const x=JSON.parse('{"title":"Creating Extensions","description":"A guide on how to scaffold your Directus Extension.","frontmatter":{"description":"A guide on how to scaffold your Directus Extension.","readTime":"5 min read"},"headers":[],"relativePath":"extensions/creating-extensions.md","lastUpdated":1682552691000}'),t={name:"extensions/creating-extensions.md"},a=o(`<h1 id="creating-extensions" tabindex="-1">Creating Extensions <a class="header-anchor" href="#creating-extensions" aria-label="Permalink to &quot;Creating Extensions&quot;">​</a></h1><h2 id="scaffolding-your-directus-extension" tabindex="-1">Scaffolding your Directus Extension <a class="header-anchor" href="#scaffolding-your-directus-extension" aria-label="Permalink to &quot;Scaffolding your Directus Extension&quot;">​</a></h2><p>The easiest way to start developing extensions is to use the <code>create-directus-extension</code> utility:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">directus-extension</span></span></code></pre></div><p>After specifying the name of the extension, the type of the extension and the programming language you want to use, the utility will create a folder with the recommended file structure to create an extension.</p><p>If you want to combine and share dependencies between one or more extensions, use the <a href="/extensions/bundles.html">bundle extension type</a>.</p><h3 id="extension-folder-structure" tabindex="-1">Extension Folder Structure <a class="header-anchor" href="#extension-folder-structure" aria-label="Permalink to &quot;Extension Folder Structure&quot;">​</a></h3><p>The folder created by the utility is in fact an npm package. It comes with a few pre-installed packages depending on the extension type and the language you chose. The most important one is <code>@directus/extensions-sdk</code>. This package includes a CLI, which allows you to build your extension and to scaffold additional extensions, and it provides Typescript helpers and other utilities.</p><p>Inside the created folder there is a <code>src/</code> folder. This folder contains the entrypoint of your extension. If you write additional source files, they should go into this folder.</p><div class="tip custom-block"><p class="custom-block-title">Entrypoint</p><p>The entrypoint is either called <code>index.js</code> or <code>index.ts</code>, depending on which programming language you chose.</p></div><p>The generated <code>package.json</code> file contains an additional <code>directus:extension</code> field with the following sub-fields:</p><ul><li><code>type</code> — The type of the extension</li><li><code>path</code> — The path to the built extension</li><li><code>source</code> — The path to the source entrypoint</li><li><code>host</code> — A semver string that indicates with which versions of the Directus host, the extension is compatible with</li></ul><p>The CLI will use those fields by default to determine the input and output file paths and how the extension should be built.</p><h2 id="building-your-extension" tabindex="-1">Building your Extension <a class="header-anchor" href="#building-your-extension" aria-label="Permalink to &quot;Building your Extension&quot;">​</a></h2><p>Before your extension can be used by Directus, it has to be built. If you used the <code>create-directus-extension</code> utility to scaffold your extension, building your extension is as easy as running:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span></span></code></pre></div><p>The generated <code>package.json</code> contains a script that calls the <code>directus-extension</code> CLI which is part of <code>@directus/extensions-sdk</code>:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">directus-extension build</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>If you prefer to scaffold your extension manually, you can use the <code>directus-extension</code> CLI binary directly. The <code>--help</code> flag provides useful information regarding the available options and flags.</p><p>Internally, the CLI uses Rollup to bundle your extension to a single entrypoint.</p><div class="tip custom-block"><p class="custom-block-title">Watch</p><p>The CLI supports rebuilding extensions whenever a file has changed by using the <code>--watch</code> flag.</p></div><h3 id="configuring-the-cli" tabindex="-1">Configuring the CLI <a class="header-anchor" href="#configuring-the-cli" aria-label="Permalink to &quot;Configuring the CLI&quot;">​</a></h3><p>Most of the time, it should be sufficient to use the CLI as is. But, in some cases it might be necessary to customize it to your specific needs. This can be done by creating a <code>extension.config.js</code> file at the root of your extension package with the following content:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h4 id="supported-options" tabindex="-1">Supported Options <a class="header-anchor" href="#supported-options" aria-label="Permalink to &quot;Supported Options&quot;">​</a></h4><ul><li><code>plugins</code> — An array of Rollup plugins that will be used when building extensions in addition to the built-in ones.</li></ul><div class="tip custom-block"><p class="custom-block-title">CommonJS or ESM</p><p>By using the <code>type</code> field inside your <code>package.json</code> file or using the appropriate file extension (<code>.mjs</code> or <code>.cjs</code>), the config file can be loaded as a CommonJS or ESM file.</p></div><h2 id="developing-your-extension" tabindex="-1">Developing your Extension <a class="header-anchor" href="#developing-your-extension" aria-label="Permalink to &quot;Developing your Extension&quot;">​</a></h2><p>To learn more about developing extensions of a specific type, you can refer to one of the individual guides:</p><h4 id="app-extensions" tabindex="-1">App Extensions <a class="header-anchor" href="#app-extensions" aria-label="Permalink to &quot;App Extensions&quot;">​</a></h4><ul><li><a href="/extensions/interfaces.html">Interfaces</a></li><li><a href="/extensions/displays.html">Displays</a></li><li><a href="/extensions/layouts.html">Layouts</a></li><li><a href="/extensions/modules.html">Modules</a></li><li><a href="/extensions/panels.html">Panels</a></li></ul><h4 id="api-extensions" tabindex="-1">API Extensions <a class="header-anchor" href="#api-extensions" aria-label="Permalink to &quot;API Extensions&quot;">​</a></h4><ul><li><a href="/extensions/hooks.html">Hooks</a></li><li><a href="/extensions/endpoints.html">Endpoints</a></li></ul><h4 id="hybrid-extensions" tabindex="-1">Hybrid Extensions <a class="header-anchor" href="#hybrid-extensions" aria-label="Permalink to &quot;Hybrid Extensions&quot;">​</a></h4><ul><li><a href="/extensions/operations.html">Operations</a></li><li><a href="/extensions/bundles.html">Bundles</a></li></ul><div class="tip custom-block"><p class="custom-block-title">Live Reloading</p><p>When working on extensions, try setting the <a href="/self-hosted/config-options.html"><code>EXTENSIONS_AUTO_RELOAD</code> environment variable</a>. This will make the API reload extensions on changes automatically.</p></div><h2 id="publishing-your-extension" tabindex="-1">Publishing your Extension <a class="header-anchor" href="#publishing-your-extension" aria-label="Permalink to &quot;Publishing your Extension&quot;">​</a></h2><p>To make an extension available to all Directus users, you can publish the npm package created by <code>@directus/extensions-sdk</code> to the npm registry. Make sure the name of the package follows the naming convention for package extensions: <code>directus-extension-&lt;extension-name&gt;</code> or <code>@&lt;scope&gt;/directus-extension-&lt;extension-name&gt;</code>. <code>&lt;extension-name&gt;</code> has to be replaced with the name of your extension.</p><h2 id="installing-an-extension" tabindex="-1">Installing an Extension <a class="header-anchor" href="#installing-an-extension" aria-label="Permalink to &quot;Installing an Extension&quot;">​</a></h2><p>There are two ways to install an extension.</p><h3 id="package-extension" tabindex="-1">Package Extension <a class="header-anchor" href="#package-extension" aria-label="Permalink to &quot;Package Extension&quot;">​</a></h3><p>Package extensions are essentially npm packages. They can be installed from the npm registry, from a tarball, from a git repository or any other means supported by npm. On startup, Directus will automatically load any package extension installed into your Directus project folder.</p><p>To install an extension from the npm registry, simply use the npm CLI:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">directus-project-folde</span><span style="color:#A6ACCD;">r</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">full-package-extension-nam</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p><code>&lt;project-folder&gt;</code> has to be replaced by the Directus project folder. <code>&lt;full-package-extension-name&gt;</code> should be replaced with the full name of the package extension (e.g. <code>directus-extension-custom</code>).</p><h3 id="local-extension" tabindex="-1">Local Extension <a class="header-anchor" href="#local-extension" aria-label="Permalink to &quot;Local Extension&quot;">​</a></h3><p>Local extensions are essentially the files generated by the <code>directus-extension build</code> command. They can be installed by copying those files into a specific extensions folder.</p><p>To install an extension locally, you have to move the output from the <code>dist/</code> folder into your project&#39;s <code>./extensions/&lt;extension-folder&gt;/&lt;extension-name&gt;/</code> folder. <code>&lt;extension-folder&gt;</code> has to be replaced by the extension type in plural form (e.g. interfaces). <code>&lt;extension-name&gt;</code> should be replaced with the name of your extension.</p><div class="warning custom-block"><p class="custom-block-title">Configurable Folders</p><p>The path to the built extension as well as the extensions directory are configurable and may be located elsewhere.</p></div>`,49),i=[a];function l(c,r,p,d,h,u){return s(),n("div",null,i)}const g=e(t,[["render",l]]);export{x as __pageData,g as default};
