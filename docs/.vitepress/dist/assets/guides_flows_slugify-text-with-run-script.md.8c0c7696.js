import{_ as l,c as t,z as s,t as n,a as o,R as e,o as p}from"./chunks/framework.70e71619.js";const m=JSON.parse('{"title":"Slugify Text With Flows","description":"A simple recipe to slugify a string of text using the Run Script operation.","frontmatter":{"description":"A simple recipe to slugify a string of text using the Run Script operation.","tags":[],"skill_level":null,"directus_version":"9.18.1","author_override":null,"author":"Eron Powell"},"headers":[],"relativePath":"guides/flows/slugify-text-with-run-script.md","lastUpdated":1682552691000}'),r={name:"guides/flows/slugify-text-with-run-script.md"},c=s("h1",{id:"slugify-text-with-flows",tabindex:"-1"},[o("Slugify Text With Flows "),s("a",{class:"header-anchor",href:"#slugify-text-with-flows","aria-label":'Permalink to "Slugify Text With Flows"'},"​")],-1),i={class:"tip custom-block"},y={class:"custom-block-title"},F=s("strong",null,"Directus Version:",-1),D=e(`<h2 id="explanation" tabindex="-1">Explanation <a class="header-anchor" href="#explanation" aria-label="Permalink to &quot;Explanation&quot;">​</a></h2><p>In some cases, you may want to take text from a title or other source and slugify it. Here&#39;s how you can implement this in a flow. Keep in mind, slugification methods can get quite complex. This recipe is intended for basic, everyday English text.</p><h2 id="the-recipe" tabindex="-1">The Recipe <a class="header-anchor" href="#the-recipe" aria-label="Permalink to &quot;The Recipe&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">Requirements</p><p>You&#39;ll need a string somewhere in your <a href="/configuration/flows.html#data-chains">data chain</a>.</p></div><ol><li>Create a <a href="/configuration/flows/operations.html#run-script">Run Script</a> operation in your flow.</li><li>Paste the following function into your Run Script operation.</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// Index data to get the string you want to slugify</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// Assign it to the &quot;text&quot; var below.</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">text</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">opKey</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nested_value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">slug</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">text</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toLowerCase</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">trim</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">/[^</span><span style="color:#C3E88D;">\\w\\s-</span><span style="color:#89DDFF;">]/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">/[</span><span style="color:#C3E88D;">\\s_-</span><span style="color:#89DDFF;">]+/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">^</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">+|</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">slug</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h2 id="final-tips" tabindex="-1">Final Tips <a class="header-anchor" href="#final-tips" aria-label="Permalink to &quot;Final Tips&quot;">​</a></h2><p>Remember, the returned value doesn&#39;t need to be a string. You can append any valid JSON onto the data chain. You could take in an array of strings, slugify all of them, push each to a new array, and append it onto the data chain... <em>or whatever your use-case calls for!</em></p>`,8);function u(a,h,d,f,A,C){return p(),t("div",null,[c,s("blockquote",null,[s("p",null,n(a.$frontmatter.description),1)]),s("div",i,[s("p",y,"Author: "+n(a.$frontmatter.author),1),s("p",null,[F,o(" "+n(a.$frontmatter.directus_version),1)])]),D])}const _=l(r,[["render",u]]);export{m as __pageData,_ as default};
